{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["ListaNegociacoes","Mensagem","Negociacao","NegociacoesView","MensagemView","DateHelper","Bind","NegociacaoService","NegociacaoController","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_listaNegociacoes","_mensagem","_ordemAtualNegociacoes","_negociacaoService","_init","_listarNegociacoesIDB","importa","list","then","negociacoes","forEach","adicionar","negociacao","length","texto","catch","e","message","apagarLista","console","log","msg","esvazia","remover","posNaLista","obterPosicaoNegociacaoNLista","setTimeout","Error","listar","lista","add","n","isNegociacaoJaExisteNaLista","cadastrar","ok","erro","event","preventDefault","_criarNegociacaoViaInputs","_limpaFormulario","negociacao2","join","Date","replace","value","push","dataConcatDiaMesAno","dataParaTexto","data","textoParaData","parseInt","parseFloat","focus","coluna","ordenaReverso","ordena","a","b","negociacaoCtrl","currentInstance"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["\r\nimport {ListaNegociacoes} from '../models/ListaNegociacoes';\r\nimport {Mensagem} from '../models/Mensagem';\r\nimport {Negociacao} from '../models/Negociacao';\r\nimport {NegociacoesView} from '../views/NegociacoesView';\r\nimport {MensagemView} from '../views/MensagemView';\r\nimport {DateHelper} from '../helpers/DateHelper';\r\nimport {Bind} from '../helpers/Bind';\r\nimport {NegociacaoService} from '../services/NegociacaoService';\r\n\r\n// (não estamos exportando NegociacaoController por que ela será um Singleton: \r\n//      vamos exportar uma função que retorna sempre a mesma instância )\r\n// ver final do arquivo.. \r\nclass NegociacaoController {\r\n\r\n    //É mais performático criar propriedades de classe para buscar elementos no DOM\r\n    // se estivessem buscando dentro do método adicion(), por ex., iria percorrer o DOM tantas vezes quanto o botão fosse acionado\r\n    // buscar elementos no DOM é custoso\r\n    constructor() {\r\n        //.bind diz para o método querySelector manter uma associação com document quando for atribuído ao $\r\n        let $ = document.querySelector.bind(document);\r\n\r\n        this._inputData = $(\"#data\");\r\n        this._inputQuantidade = $(\"#quantidade\");\r\n        this._inputValor = $(\"#valor\"); \r\n\r\n        /*Como a _armadilha foi passada por meio de arrow function, onde o 'this' é estático/léxico \r\n                ('this' é fixo, ou seja, é o mesmo contexto do objeto ao qual a arrow function está inserida) \r\n            e não por meio de uma function normal, onde o 'this' é dinâmico\r\n                ('this' varia de acordo com o contexto ao qual a função é chamada)\r\n            então, vamos deixar comentada essa possibilidade\r\n        */\r\n        //'this' é dinâmico, varia com o contexto, por isso é necessário enviar \r\n        //  'this' (NegociacaoController) como parametro, sinalizando qual deve ser o contexto dentro da function\r\n        // Será necessário usar API de reflexão para invocar a função armadilha, nesse modo\r\n        //primeiro param: 'this' é o contexto em que a função vai ser executada\r\n        /*\r\n            this._listaNegociacoes = new ListaNegociacoes(this, function(model) {\r\n                console.log(this); \r\n                this._negociacoesView.update(this._listaNegociacoes);\r\n            });\r\n        */\r\n        /* Assim funciona bem também (variável auxiliar para this)\r\n            let self = this;\r\n            this._listaNegociacoes = new ListaNegociacoes(function(model) { \r\n                self._negociacoesView.update(model);\r\n            });\r\n        */\r\n        // com Arrow Function o 'this' é fixo, e considera o contexto atual para executar dentro da função armadilha\r\n        /* - Não vamos mais usar armadilha (Observer), vamos usar Proxy para não poluir o modelo com armadilhas\r\n            this._listaNegociacoes = new ListaNegociacoes(model =>\r\n                    this._negociacoesView.update(this._listaNegociacoes));\r\n        /* com uso de Proxy (muito verbos)\r\n            let self = this;\r\n            this._listaNegociacoes = new Proxy(new ListaNegociacoes(), {}\r\n                //handler(contém as armadilhas/trap)\r\n                get(target, prop, receiver) {\r\n                    if (['add', 'esvazia'].includes(prop) && typeof(target[prop]) == typeof(Function)) {\r\n                        return function() {\r\n                            //target: _listaNegociacoes\r\n                            //prop: add ou esvazia\r\n                            //receiver: referencia ao próprio proxy \r\n                            console.log(`interceptando ${prop}`);\r\n                            Reflect.apply(target[prop], target, arguments); //arguments é um objeto implicito que contem todos os parametros/argumentos da chamada\r\n                            self._negociacoesView.update(target); //nem com arrow function seria possivel acessar o contexto desse controller\r\n                        }\r\n                    }\r\n                    return Reflect.get(target, prop, receiver);\r\n                }\r\n            });\r\n        */\r\n        \r\n        // Vamos usar o pattern factory com ProxyFactory.js. Também vamos usar com Bind.js para fazer associação entre modelo e view\r\n        // Bind deixa claro que é para fazer uma associação entre o modelo e a view quando alguns métodos forem invocados\r\n        this._listaNegociacoes = new Bind(new ListaNegociacoes()\r\n                                        , new NegociacoesView($('#idNegociacoesView'))\r\n                                        , 'add', 'esvazia', 'remover', 'ordena', 'ordenaReverso');\r\n        \r\n        this._mensagem = new Bind(new Mensagem()\r\n                                , new MensagemView($(\"#idMensagemView\"))\r\n                                , 'texto');\r\n\r\n        this._ordemAtualNegociacoes = '';\r\n\r\n        this._negociacaoService = new NegociacaoService();\r\n\r\n        this._init();\r\n    }\r\n\r\n    _init() {\r\n\r\n        this._listarNegociacoesIDB();\r\n\r\n        // setInterval(() => this.importaNegociacoes(), 10000);\r\n    }\r\n\r\n    importaNegociacoes() {\r\n        this._negociacaoService.importa(this._listaNegociacoes.list)\r\n            .then(negociacoes => {\r\n                    negociacoes.forEach(negociacao => this.adicionar(negociacao));\r\n                    if (negociacoes.length > 0)\r\n                        this._mensagem.texto = 'Negociações foram importadas com sucesso';\r\n                    else \r\n                        this._mensagem.texto = 'Não existe negociações para importar ou elas já foram importadas';\r\n            })\r\n            .catch(e => this._mensagem.texto = e.message);\r\n    }\r\n\r\n    apaga() {\r\n        if (this._listaNegociacoes.list.length == 0) {\r\n            this._mensagem.texto = 'Não existe negociação para ser apagada';\r\n        } else {\r\n            this._negociacaoService.apagarLista()\r\n                .then(msg => {\r\n                    console.log(msg);\r\n                    this._listaNegociacoes.esvazia();\r\n                    this._mensagem.texto = 'As negociações foram apagadas com sucesso';\r\n                })\r\n                .catch(e => this._mensagem.texto = e);\r\n        }\r\n    }\r\n\r\n    remover(negociacao) {\r\n        return this._negociacaoService.remover(negociacao)\r\n            .then(msg => {\r\n                let posNaLista = ListaNegociacoes.obterPosicaoNegociacaoNLista(this._listaNegociacoes.list, negociacao);\r\n                    console.log(posNaLista + ' posição');\r\n                if (posNaLista >= 0) {\r\n                    //timeout para dar tempo de animar com fadeOut antes de chamar update da view via Bind (gambiarra)\r\n                    setTimeout(() => this._listaNegociacoes.remover(posNaLista), 550); \r\n                    this._mensagem.texto = 'A negociação foi apagada com sucesso';\r\n                }\r\n            })\r\n            .catch(e => { \r\n                this._mensagem.texto = e.message\r\n                throw new Error(e.message);\r\n            });\r\n    }\r\n\r\n    _listarNegociacoesIDB() {\r\n        this._negociacaoService.listar()\r\n            .then(lista => lista.forEach(n => this._listaNegociacoes.add(n)))\r\n            // .then(() => console.log('!@#$%¨-------1')) // pode encadear quantos 'then' quiser para a mesma promise\r\n            // .then(() => console.log('!@#$%¨-------2'))\r\n            .catch(e => this._mensagem.texto = e);\r\n    }\r\n\r\n    adicionar(negociacao) {\r\n\r\n        if (ListaNegociacoes.isNegociacaoJaExisteNaLista(this._listaNegociacoes.list, negociacao)) {\r\n            this._mensagem.texto = 'Essa negociação já existe: ' + negociacao;\r\n            return false;\r\n        }\r\n\r\n        return this._negociacaoService.cadastrar(negociacao)\r\n            .then(ok => {\r\n                if (ok) {\r\n                    console.log('Negociação adicionada ao Indexed-DB com sucesso');\r\n                    this._listaNegociacoes.add(negociacao);   \r\n                    return true;                 \r\n                } else {\r\n                    return false;\r\n                }\r\n            })\r\n            .catch(erro => this._mensagem.texto = `Erro ao adicionar Negociação: ${erro}`);\r\n    }\r\n\r\n    adiciona(event) {\r\n        event.preventDefault();\r\n        let negociacao = this._criarNegociacaoViaInputs();\r\n        this.adicionar(negociacao)\r\n            .then(ok => {\r\n                if (ok) {\r\n                    this._mensagem.texto = 'Negociação adicionada com sucesso!';\r\n                    this._limpaFormulario();\r\n                } else {\r\n                    this._mensagem.texto = 'Erro ao adicionar negociação na lista!';\r\n                }\r\n            });\r\n\r\n        /*######### testes*/\r\n        let negociacao2 = null;\r\n        try {\r\n            negociacao2 = this._criarNegociacaoViaInputs();\r\n        } catch(erro) {\r\n            this._mensagem.texto = `Erro ao criar Negociação: ${erro}`;\r\n            return;\r\n        }\r\n        console.log(['2016', '10', '25'].join(','));\r\n        console.log(new Date(2016, 8, 30));\r\n        // Encontre todos os '-' na string e substitua por ','\r\n        console.log('2016-10-25'.replace(/-/g, ',')); //RegExp em JavaScript fica entre 2 '/' ('/regex/'). 'g' é referente à global\r\n        //data vem no formato yyyy-mm-dd. Exemplo: '2016-10-22'\r\n        console.log(typeof(this._inputData.value) + \" \" + this._inputData.value);\r\n        this._listaNegociacoes.list.length = 0; // não vai atingir a lista de _listaNegociacoes (programado defensivamente)\r\n        this._listaNegociacoes.list.push(negociacao2); // não vai atingir a lista de _listaNegociacoes (programado defensivamente)\r\n        let dataConcatDiaMesAno = DateHelper.dataParaTexto(negociacao2.data);\r\n        console.log('Data concatenada: ' + dataConcatDiaMesAno);\r\n        console.log(this._listaNegociacoes.list);\r\n    }\r\n\r\n    _criarNegociacaoViaInputs() {\r\n        return new Negociacao(\r\n                    DateHelper.textoParaData(this._inputData.value),\r\n                    parseInt(this._inputQuantidade.value),\r\n                    parseFloat(this._inputValor.value)\r\n                );\r\n    }\r\n\r\n    _limpaFormulario() {\r\n        console.log('limpando formulário...');\r\n        this._inputData.value = '';\r\n        this._inputQuantidade.value = 1;\r\n        this._inputValor.value = 0.0;\r\n        this._inputData.focus();\r\n    }\r\n\r\n    ordena(coluna) {\r\n        // Não podemos fazer a.quantidade ou a.data, \r\n        // porque a propriedade usada no critério de ordenação é escolhida pelo usuário. \r\n        // Sendo assim, usamos a sintaxe objeto[nomePropriedade] para acessar a propriedade do objeto\r\n        if (this._ordemAtualNegociacoes == coluna)\r\n            this._listaNegociacoes.ordenaReverso();\r\n        else\r\n            this._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);\r\n        this._ordemAtualNegociacoes = coluna;\r\n    }\r\n}\r\n\r\n\r\n// Singleton\r\nlet negociacaoCtrl = new NegociacaoController();\r\nexport function currentInstance() {\r\n    return negociacaoCtrl;\r\n} "]}