{"version":3,"sources":["../../app-es6/lib/datex.js"],"names":["DateHelper","sDate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYMA,sB;;;;;;;iDAEWC,K,EAAO;AAChB;AACH","file":"datex.js","sourcesContent":["\n/*\nSimulando uma biblioteca externa que, por coincidência, tem uma classe com o mesmo nome de uma \n já existente no sistema. Isso irá ocasionar erro na aplicação, pois o último script importado no html\n que contiver a classe repetida, irá sobrescrever a anterior.\n \n Para fugir disso iremos usar o sistema de módulos do ES6:\n Uma vez ativado o sistema de módulos do ES6, todo conteúdo de um script deixa de estar no escopo global\n    , não sendo mais acessível para os outros. Nenhuma classe estaria mais no escopo global.\n Para tanto, é necessário que export e import sejam feitos em cada arquivo onde há dependência\n\n */\nclass DateHelper {\n\n    stringToDate(sDate) {\n        //.. faz alguma coisa\n    }\n}"]}