{"version":3,"sources":["../../app-es6/views/NegociacoesView.js"],"names":["View","DateHelper","Negociacao","currentInstance","NegociacoesView","elemento","addEventListener","event","target","nodeName","ordena","textContent","toLowerCase","_removerNegociacaoTR","ev","trNegociacao","parentNode","tdsNeg","querySelectorAll","console","log","negociacao","textoParaData","split","reverse","join","remover","then","classList","add","setTimeout","remove","catch","error","err","model","list","map","n","pk","dataParaTexto","data","quantidade","valor","volume","total","forEach","reduce","volumeTotal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACQA,gB,UAAAA,I;;AACAC,sB,sBAAAA,U;;AACAC,sB,qBAAAA,U;;AACAC,2B,oCAAAA,e;;;;;;;;;;;;;;;;;;;;;uCAMKC,e;;;AAET,yCAAYC,QAAZ,EAAsB;AAAA;;AAAA,kJACZA,QADY;;AAGlB;AACAA,6BAASC,gBAAT,CAA0B,OAA1B,EAAmC,UAASC,KAAT,EAAgB;AAC/C,4BAAIA,MAAMC,MAAN,CAAaC,QAAb,IAAyB,IAA7B,EAAmC;AAC/BN,8CAAkBO,MAAlB,CAAyBH,MAAMC,MAAN,CAAaG,WAAb,CAAyBC,WAAzB,EAAzB;AACH;AACJ,qBAJD;;AAMA,0BAAKC,oBAAL,CAA0BR,QAA1B;;AAVkB;AAYrB;;;;yDAEoBA,Q,EAAU;;AAE3BA,iCAASC,gBAAT,CAA0B,UAA1B,EAAsC,UAASQ,EAAT,EAAa;AAC/C,gCAAIA,GAAGN,MAAH,CAAUC,QAAV,IAAsB,IAA1B,EAAgC;AAC5B,oCAAIM,eAAeD,GAAGN,MAAH,CAAUQ,UAA7B;;AAEI,oCAAIC,SAASF,aAAaG,gBAAb,CAA8B,IAA9B,CAAb;AACAC,wCAAQC,GAAR,CAAYH,OAAO,CAAP,EAAUN,WAAtB;AACA,oCAAIU,aAAa,IAAInB,UAAJ,CACGD,WAAWqB,aAAX,CAAyBL,OAAO,CAAP,EAAUN,WAAV,CAAsBY,KAAtB,CAA4B,GAA5B,EAAiCC,OAAjC,GAA2CC,IAA3C,CAAgD,GAAhD,CAAzB,CADH,EAEGR,OAAO,CAAP,EAAUN,WAFb,EAGGM,OAAO,CAAP,EAAUN,WAHb,EAIGM,OAAO,CAAP,EAAUN,WAJb,CAAjB;AAKAR,kDAAkBuB,OAAlB,CAA0BL,UAA1B,EACKM,IADL,CACU,eAAO;AACTZ,iDAAaa,SAAb,CAAuBC,GAAvB,CAA2B,SAA3B;AACAC,+CAAW,YAAW;AAClBf,qDAAagB,MAAb;AACH,qCAFD,EAEG,GAFH;AAGH,iCANL,EAOKC,KAPL,CAOW;AAAA,2CAAOb,QAAQc,KAAR,CAAcC,GAAd,CAAP;AAAA,iCAPX;AAQP;AACJ,yBApBD;AAqBH;;;6CAGQC,K,EAAO;AAAE;AACd,y2BAkBcA,MAAMC,IAAN,CAAWC,GAAX,CAAe;AAAA,wHAEKC,EAAEC,EAFP,uDAGKtC,WAAWuC,aAAX,CAAyBF,EAAEG,IAA3B,CAHL,uDAIKH,EAAEI,UAJP,uDAKKJ,EAAEK,KALP,uDAMKL,EAAEM,MANP;AAAA,yBAAf,EAQKnB,IARL,CAQU,EARV,CAlBd,oKAgC0B;AACA;AACA;AACG,oCAAW;AACR,gCAAIoB,QAAQ,CAAZ;AACAV,kCAAMC,IAAN,CAAWU,OAAX,CAAmB;AAAA,uCAAKD,SAASP,EAAEM,MAAhB;AAAA,6BAAnB;AACA,mCAAOC,KAAP;AACH,yBAJD,EAnC5B,CAuCiC;AAvCjC,oGA0C2B;AACH;AACIV,8BAAMC,IAAN,CAAWW,MAAX,CAAkB,UAASF,KAAT,EAAgBP,CAAhB,EAAmB;AACjC,mCAAOO,QAAQP,EAAEM,MAAjB;AACH,yBAFD,EAEG,GAFH,CA5C5B,CA8CoC;AA9CpC,+IAmDkBT,MAAMa,WAnDxB,CAmDoC,qEAnDpC;AAwDH;;;;cAnGgChD,I","file":"NegociacoesView.js","sourcesContent":["\nimport {View} from './View';\nimport {DateHelper} from '../helpers/DateHelper';\nimport {Negociacao} from '../models/Negociacao';\nimport {currentInstance} from '../controllers/NegociacaoController';\n\n/* Esse conceito de trazer o html para o mundo javascript por meio de classes view\n    é muito usado no framework React, do facebook, no qual se usa uma API para facilitar o auto-complete e outros componentes proprietários.\n   Já o Angular deixa a view a cargo tão somente do HTML.\n*/\nexport class NegociacoesView extends View {\n\n    constructor(elemento) {\n        super(elemento);\n\n        //usando event bubbling\n        elemento.addEventListener('click', function(event) {\n            if (event.target.nodeName == 'TH') {\n                currentInstance().ordena(event.target.textContent.toLowerCase());\n            }\n        });\n\n        this._removerNegociacaoTR(elemento);\n\n    }\n\n    _removerNegociacaoTR(elemento) {\n\n        elemento.addEventListener('dblclick', function(ev) {\n            if (ev.target.nodeName == 'TD') {\n                let trNegociacao = ev.target.parentNode;\n                \n                    let tdsNeg = trNegociacao.querySelectorAll('td');\n                    console.log(tdsNeg[0].textContent);\n                    let negociacao = new Negociacao(\n                                        DateHelper.textoParaData(tdsNeg[1].textContent.split('/').reverse().join('-'))\n                                      , tdsNeg[2].textContent\n                                      , tdsNeg[3].textContent\n                                      , tdsNeg[0].textContent);\n                    currentInstance().remover(negociacao)\n                        .then(ret => {\n                            trNegociacao.classList.add(\"fadeOut\");\n                            setTimeout(function() {    \n                                trNegociacao.remove();\n                            }, 500);\n                        })\n                        .catch(err => console.error(err));\n            }\n        });\n    }\n\n    //usando template string pois com aspas simples seria necessário concatenar com '+' todas as quebras de linha\n    template(model) { // model é a lista de negociacoes (ListaNegociacoes)\n        return `\n            <table class=\"table table-hover table-bordered\">\n                <thead>\n                    <tr>\n                        <th>PK</th>\n                        <th>DATA</th>\n                        <th>QUANTIDADE</th>\n                        <th>VALOR</th>\n                        <th>VOLUME</th>\n                        \n                        <!-- <th onclick=\"negociacaoCtrl.ordena('data')\">DATA</th> -->\n                        <!-- <th onclick=\"negociacaoCtrl.ordena('quantidade')\">QUANTIDADE</th> -->\n                        <!-- <th onclick=\"negociacaoCtrl.ordena('valor')\">VALOR</th> -->\n                        <!-- <th onclick=\"negociacaoCtrl.ordena('volume')\">VOLUME</th> -->\n                    </tr>\n                </thead>\n                \n                <tbody>\n                    ${model.list.map(n => `\n                                <tr>\n                                    <td>${n.pk}</td>\n                                    <td>${DateHelper.dataParaTexto(n.data)}</td>\n                                    <td>${n.quantidade}</td>\n                                    <td>${n.valor}</td>\n                                    <td>${n.volume}</td>\n                                </tr>\n                        `).join('')}\n                </tbody>\n\n                <tfoot>\n                    <td colspan=\"4\"></td>\n                    <!--\n                            <td>${//não é possivel inserir varias instruções dentro de uma expreção template string\n                                  // por isso aqui usamo a estrategia da função auto-invocada,\n                                  // a function fica dentro de parenteses e depois por fora abre e fecha parenteses para auto invocar\n                                    (function() {\n                                        let total = 0;\n                                        model.list.forEach(n => total += n.volume);\n                                        return total;\n                                    })() // Immediately-invoked function expression (IIFE) ou a função imediata (função auto-invocada)\n                                }\n                            </td>\n                            <td>${ // de maneira funcional. reduce() processa o array e retorna um valor\n                                // o retorno de cada iteração é atribuido a variavel do primeiro parametro da function\n                                    model.list.reduce(function(total, n) {\n                                        return total + n.volume;    \n                                    }, 0.0) // '0.0' é um parametro que inicializa o total         \n                                }\n                            </td>\n                    -->\n                    <td>\n                        ${model.volumeTotal /*mais orientado a objeto. a totalização vai para o modelo calcular*/}      \n                    </td>\n                </tfoot>\n            </table>\n        `;\n    }\n}\n\n"]}