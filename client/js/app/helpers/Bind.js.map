{"version":3,"sources":["../../app-es6/helpers/Bind.js"],"names":["ProxyFactory","Bind","model","view","props","proxy","create","update"],"mappings":";;;;;;;;;;;;;;;AACQA,wB,yBAAAA,Y;;;4BAEKC,I;;AAET;;;;;;;;;AASA,0BAAYC,KAAZ,EAAmBC,IAAnB,EAAqD;AAAA;;AAAA,kDAAPC,KAAO;AAAPA,yBAAO;AAAA;;AAEjD,oBAAIC,QAAQL,aAAaM,MAAb,CAAoBJ,KAApB,EAA2BE,KAA3B,EAAkC;AAAA,2BAASD,KAAKI,MAAL,CAAYL,KAAZ,CAAT;AAAA,iBAAlC,CAAZ;AACAC,qBAAKI,MAAL,CAAYL,KAAZ,EAHiD,CAG7B;;AAEpB;AACA,uBAAOG,KAAP,CANiD,CAMnC;AACjB,a","file":"Bind.js","sourcesContent":["\nimport {ProxyFactory} from '../services/ProxyFactory';\n\nexport class Bind {\n\n    /* REST Operator é análogo ao varargs do java (irá permitir receber infinitos parâmetros)\n        e esses infinitos paramtros terão sua representação em um array.\n        Só pode ser usado no ultimo paramtro da function, do contrário seria impossível saber quais seriam valores\n        dos parametros subsequentes, pois o rest operator vai até o infinito e além\n            \n            *É uma sintaxee parecida com a do Spread Operator, mas o Spread serve para invocar um método\n            passando um array e eis que o Spread irá quebrar o array de forma a criar uma correspondencia\n            para todos os paramtros do método/function que foi invocado\n    */\n    constructor(model, view, /*REST Operator */...props) {\n        \n        let proxy = ProxyFactory.create(model, props, model => view.update(model));\n        view.update(model); //atualizando pela primeira vez\n\n        //em javascript um construtor pode devolvel qualquer 'coisa'\n        return proxy; // isso é bizzaro, muito!!\n    }\n}"]}