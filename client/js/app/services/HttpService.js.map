{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","resp","ok","Error","status","url","console","log","fetch","then","_hangleErrors","json","dado","headers","method","body","JSON","stringify","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","parse","responseText","send","setRequestHeader"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAEKC,I,EAAM;AAChB,4BAAIA,KAAKC,EAAT,EAAa;AAAE;AACX,mCAAOD,IAAP;AACH,yBAFD,MAEO;AACH,kCAAM,IAAIE,KAAJ,+DAAgEF,KAAKG,MAArE,mBAAyFH,KAAKI,GAA9F,CAAN;AACH;AACJ;;;wCAEGA,G,EAAK;AAAA;;AACL;AACA;AACA;AACAC,gCAAQC,GAAR,CAAY,8CAA8CF,GAA1D;AACA,+BAAOG,MAAMH,GAAN,EACFI,IADE,CACG;AAAA,mCAAQ,MAAKC,aAAL,CAAmBT,IAAnB,CAAR;AAAA,yBADH,EAEFQ,IAFE,CAEG;AAAA,mCAAQR,KAAKU,IAAL,EAAR;AAAA,yBAFH,CAAP,CALK,CAO2B;AACnC;;;yCAEIN,G,EAAKO,I,EAAM;AAAA;;AACZ,+BAAOJ,MAAMH,GAAN,EAAW;AACNQ,qCAAS,EAAC,gBAAiB,kBAAlB,EADH;AAENC,oCAAQ,MAFF;AAGNC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHA,yBAAX,EAKEH,IALF,CAKO;AAAA,mCAAQ,OAAKC,aAAL,CAAmBT,IAAnB,CAAR;AAAA,yBALP,CAAP;AAOH;;;4CAEOI,G,EAAK;AACT,+BAAO,IAAIa,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,gCAAIE,IAAJ,CAAS,KAAT,EAAgBlB,GAAhB;;AAEA;AACAgB,gCAAIG,kBAAJ,GAAyB,YAAM;AAAE;AAC7B;;;;;;;AAOA,oCAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;AACrB,wCAAIJ,IAAIjB,MAAJ,IAAc,GAAlB,EAAuB;AACnBe,gDAAQH,KAAKU,KAAL,CAAWL,IAAIM,YAAf,CAAR;AACH,qCAFD,MAEO;AACHP,+CAAOC,IAAIM,YAAX;AACH;AACJ;AACJ,6BAfD;;AAiBAN,gCAAIO,IAAJ;;AAEA;;;;;;;;;;;;;AAaH,yBArCM,CAAP;AAsCH;;;6CAGQvB,G,EAAKO,I,EAAM;;AAEhB,+BAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,gCAAIE,IAAJ,CAAS,MAAT,EAAiBlB,GAAjB,EAAsB,IAAtB;AACAgB,gCAAIQ,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAR,gCAAIG,kBAAJ,GAAyB,YAAM;AAC3B,oCAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;AACrB,wCAAIJ,IAAIjB,MAAJ,IAAc,GAAlB,EAAuB;AACnBe,gDAAQH,KAAKU,KAAL,CAAWL,IAAIM,YAAf,CAAR;AACH,qCAFD,MAEO;AACHP,+CAAOC,IAAIM,YAAX;AACH;AACJ;AACJ,6BARD;AASAN,gCAAIO,IAAJ,CAASZ,KAAKC,SAAL,CAAeL,IAAf,CAAT,EAdoC,CAcJ;AACnC,yBAfM,CAAP;AAiBH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n    _hangleErrors(resp) {\r\n        if (resp.ok) { // se ok é verdadeiro, é porque o status é um valor entre 200 e 299 (válido)\r\n            return resp;\r\n        } else {\r\n            throw new Error(`Erro ao obter resposta da requisição ajax. Status: ${resp.status} para URL: ${resp.url}`);\r\n        }\r\n    }\r\n\r\n    get(url) {\r\n        //usando API de busca nativa do EcmaScript2015 (ou, EcmaScript6): 'Fetch API'\r\n        // 'fetch' é uma variável que se encontra no escopo global\r\n        // retorna uma promise\r\n        console.log('usando Fetch API para requisição ajax... ' + url);\r\n        return fetch(url)\r\n            .then(resp => this._hangleErrors(resp))\r\n            .then(resp => resp.json()); // resp.json() substitui a necessidade JSON.parse(resp). Poderia ser resp.text() também\r\n    }\r\n\r\n    post(url, dado) {\r\n        return fetch(url, {\r\n                    headers: {'Content-type' : 'application/json'},\r\n                    method: 'POST',\r\n                    body: JSON.stringify(dado)\r\n                })\r\n                .then(resp => this._hangleErrors(resp));\r\n\r\n    }\r\n\r\n    get_OLD(url) {\r\n        return new Promise((resolve, reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', url);\r\n\r\n            /*sempre que a requisição mudar de estado esse listener será invocado*/\r\n            xhr.onreadystatechange = () => { // poderia usar também: xhr.addEventListener('load', () => {...  \r\n                /* Possíveis estados:\r\n                    0: Requisição ainda não iniciada\r\n                    1: Conexão com o servidor estabelecida\r\n                    2: Requisição recebida no servidor\r\n                    3: Processando requisição\r\n                    4: Requisição concluída e resposta pronta (a resposta pode ser um erro também)\r\n                */\r\n                if (xhr.readyState == 4) {\r\n                    if (xhr.status == 200) {\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n\r\n            xhr.send();\r\n\r\n            /* Poderia ser assim, mas optamos por: xhr.onreadystatechange = () => { ...\r\n                    xhr.addEventListener('load', () => { \r\n                        if (xhr.status == 200) {\r\n                            let resposta = xhr.responseText;\r\n                            console.log(resposta);\r\n                            let listaNegociacoesImportadas = JSON.parse(resposta);\r\n                            listaNegociacoesImportadas.forEach(negociacao =>\r\n                                this._listaNegociacoes.add(new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor)) );\r\n                        } else {\r\n                            console.log(`response error status: ${xhr.status}`)\r\n                        }\r\n                    });\r\n            */\r\n        });\r\n    }\r\n\r\n\r\n    post_OLD(url, dado) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n                if (xhr.readyState == 4) {\r\n                    if (xhr.status == 200) {\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n        });\r\n\r\n    }\r\n}"]}