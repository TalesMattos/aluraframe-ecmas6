{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","ListaNegociacoes","NegociacaoService","_httpService","get","then","negociacoesJSON","map","Date","negociacaoJSON","data","quantidade","valor","catch","console","log","erro","Error","message","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","negociacoes","negociacoesResolve","reduce","arrayConcat","array","concat","negociacao","getConnection","conn","dao","adicionar","listarTodos","e","apagarTodas","remover","pk","err","listaAtual","obterNegociacoes","filter","isNegociacaoJaExisteNaLista"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\nimport {ListaNegociacoes} from '../models/ListaNegociacoes';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._httpService = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        \r\n       return this._httpService.get('negociacoes/semana')//ou url poderia ser http://localhost:3000/negociacoes/anterior (como é uma chamada local pode omitir http://localhost:3000/)\r\n                .then(negociacoesJSON => {\r\n                    // ao invés de passar o resultado para resolve(...) estamos retornando o resultado\r\n                    // pois assim poderemos encadear com a nova chama a função 'then' lá no NegociacaoController.js\r\n                    return negociacoesJSON.map(negociacaoJSON => \r\n                                            new Negociacao(new Date(negociacaoJSON.data), negociacaoJSON.quantidade, negociacaoJSON.valor));\r\n                }) \r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    // atirar o erro fará com que o erro seja encadeado na próxima chamada a de 'catch' no NegociacaoController.js\r\n                    throw new Error('Não foi possível importar as negociações da semana atual. ' + erro.message);\r\n                });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n\r\n        return this._httpService.get('negociacoes/anterior') \r\n                .then(negociacoesJSON => {\r\n                    return negociacoesJSON.map(negociacaoJSON => \r\n                                            new Negociacao(new Date(negociacaoJSON.data), negociacaoJSON.quantidade, negociacaoJSON.valor));\r\n                }) \r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível importar as negociações da semana anterior. ' + erro.message);\r\n                });\r\n    }\r\n    \r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n       return this._httpService.get('negociacoes/retrasada')\r\n                .then(negociacoesJSON => {\r\n                     return negociacoesJSON.map(negociacaoJSON => \r\n                                            new Negociacao(new Date(negociacaoJSON.data), negociacaoJSON.quantidade, negociacaoJSON.valor));\r\n                }) \r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível importar as negociações da semana retrasada. ' + erro.message);\r\n                });\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        //ES6 suporta nativamente promises:\r\n\r\n        //encadeia várias promises e as executas na ordem estabeleciada. \r\n        //Não há mais o problema das promises disparadas separadamente, uma vez que elas são assíncronas\r\n        return Promise.all([this.obterNegociacoesDaSemana()\r\n                            , this.obterNegociacoesDaSemanaAnterior()\r\n                            , this.obterNegociacoesDaSemanaRetrasada()\r\n                        ]).then(negociacoesResolve => { //recebe o que foi passado para 'resolve' (os acumulados das várias promises = um array de arrays)\r\n                            let negociacoes = negociacoesResolve\r\n                                    .reduce((arrayConcat, array) => arrayConcat.concat(array), []/*inicialização de arrayConcat*/);\r\n                            return negociacoes;\r\n                        }).catch(erro => {\r\n                            throw new Error(erro.message)\r\n                        });\r\n    }\r\n\r\n    cadastrar(negociacao) {\r\n\r\n        return ConnectionFactory.getConnection()\r\n            .then(conn => new NegociacaoDao(conn))\r\n            .then(dao => dao.adicionar(negociacao))\r\n            .then(() => true)\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Erro ao adicionar a negociação no Indexed-DB')\r\n            });\r\n    }\r\n\r\n    listar() {\r\n        return ConnectionFactory.getConnection()\r\n            .then(conn => new NegociacaoDao(conn))\r\n            .then(dao => dao.listarTodos())\r\n            .catch(e => {\r\n                console.log(e);\r\n                throw new Error('Não foi possível listar as negociações');\r\n            });\r\n\r\n    }\r\n\r\n    apagarLista() {\r\n        return ConnectionFactory.getConnection()\r\n                .then(conn => new NegociacaoDao(conn))\r\n                .then(dao => dao.apagarTodas())\r\n                .catch(e => {\r\n                    console.log(e);\r\n                    throw new Error('Não foi possível apagar as negociações');\r\n                });\r\n    }\r\n\r\n    remover(negociacao) {\r\n        return ConnectionFactory.getConnection()\r\n            .then(conn => new NegociacaoDao(conn))\r\n            .then(dao => dao.remover(negociacao))\r\n            .catch(err => {\r\n                throw new Error('Não foi possível remover a negociação id: ' + negociacao.pk + '. ' + err.message);\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n                .then(negociacoes => \r\n                    negociacoes.filter(negociacao =>  // o filter elimina os itens que retornarem false na função\r\n                        // se não encontrou, então pode importar, pode manter no array (por isso a negação)\r\n                        !ListaNegociacoes.isNegociacaoJaExisteNaLista(listaAtual, negociacao)\r\n                    )\r\n                )\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error(erro.message);\r\n                });\r\n\r\n    }\r\n\r\n}"]}